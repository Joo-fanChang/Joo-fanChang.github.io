{"version":3,"sources":["assets/avatar.jpeg","utils/constants.ts","components/Checkerboard/index.tsx","components/ControllBar/index.tsx","components/GridStatus/index.tsx","components/GameStatus/index.tsx","components/History/index.tsx","utils/index.ts","utils/SudokuCls.ts","state.ts","events.ts","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","controllKeys","Array","fill","map","_","idx","n","baseNums","Object","toConsumableArray","rownames","split","colnames","Checkerboard","observer","_ref","sudoku","gridClick","react","className","key","grids","row","rowIdx","cls","classnames","checkerboard-row","last-row","length","multiple-of-three","grid","colIdx","gridCls","checkerboard-block","is-choosed","status","isChoosed","is-inited","isInit","onClick","showNum","ControllBar","controllBar","barClick","choosedGrid","clearCls","controll-item","clear","num","col","active","forbidden","GridStatus","_ref2","GameStatus","start","src","avatar","alt","History","history","stepClick","step","concat","Controll","classCallCheck","this","Utils","rowKey","colKey","Math","floor","end","random","nums","randomArray","array","len","forEach","isCorrect","sums","palaceKey","getPalaceKey","collect","keys","Grid","_class","_num","initializerDefineProperty","_descriptor","belongToPalace","availabelNums","availabelIdx","_descriptor2","createClass","value","get","set","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","Sudoku","numberOfMumbers","_descriptor3","reset","generateGrids","digHoles","fillFirstRow","fillRows","randomNums","randomOne2Nine","pop","startRowIdx","startColIdx","i","j","getAvailableNums","_this$toFlashBack","toFlashBack","a","b","toFlashBackByRow","toFlashBackByCol","prevGrid","fillNextNum","prevRowIdx","nextNum","next","targetRowIdx","targetColIdx","targetBelongToPalaca","occupiedRowNums","occupiedColNums","occupiedPalaceNums","push","occupiedNums","Set","allNums","filter","x","has","holes","digs","toArray","state","state_class","SudokuStore","state_descriptor","state_descriptor2","state_descriptor3","_descriptor4","_descriptor5","startGame","SudokuCls","isWin","calcControllBar","activeNums","bar","includes","_this$choosedGrid","addGrid2History","isOver","prevShowNum","unshift","shift","chooseGrid","isCorrectData","incompleteArray","action","getOwnPropertyDescriptor","props","pageStore","controll","fillNum","resetFromHistory","App","App_class","_Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","_this$props$pageStore","react_default","createElement","components_Checkerboard","events","bind","src_components_ControllBar","src_components_GameStatus","components_History","components_GridStatus","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.af5a74b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.e70390ca.jpeg\";","\nexport const controllKeys = Array(9).fill(0).map((_, idx) => idx).map(n => n + 1);\nexport const baseNums = [...controllKeys];\nexport const rownames = '123456789'.split('');\nexport const colnames = 'ABCDEFGHI'.split('');","import * as React from 'react';\nimport './index.css';\nimport classnames from 'classnames';\nimport { rownames, colnames } from '../../utils/constants';\nimport SudokuCls, { Grid } from '../../utils/SudokuCls';\nimport { observer } from 'mobx-react';\n\ninterface IProps {\n  sudoku: SudokuCls;\n  gridClick: (grid: Grid) => void;\n}\n\nconst Checkerboard: React.SFC<IProps> = observer(({ sudoku, gridClick }) => {\n\n  return (\n    <div className=\"checkerboard\">\n      <div className=\"coordinate-row\">\n        {\n          colnames.map(key => (\n            <span key={key} className=\"coordinate-block\">{ key }</span>\n          ))\n        }\n      </div>\n      {\n        sudoku.grids.map((row, rowIdx) => {\n          const cls = classnames({\n            'checkerboard-row': true,\n            'last-row': rowIdx === sudoku.grids.length - 1,\n            'multiple-of-three': rowIdx % 3 === 2,\n          })\n          return (\n            <div key={rowIdx} className={cls}>\n              {\n                row.map((grid, colIdx) => {\n                  const gridCls = classnames({\n                    'checkerboard-block': true,\n                    'is-choosed': grid.status.isChoosed,\n                    'is-inited': grid.status.isInit,\n                  });\n                  return (\n                    <span \n                      key={colIdx} \n                      className={gridCls}\n                      onClick={() => gridClick(grid)}\n                    >\n                      { grid.showNum }\n                    </span>\n                  )\n                })\n              }\n            </div>\n          )\n        })\n      }\n      <div className=\"coordinate-col\">\n        {\n          rownames.map(key => (\n            <span key={key} className=\"coordinate-block\">{ key }</span>\n          ))\n        }\n      </div>\n    </div>\n  );\n});\n\nexport default Checkerboard;\n","import * as React from 'react';\nimport { Controll } from '../../utils';\nimport './index.css';\nimport classnames from 'classnames';\nimport { Grid } from '../../utils/SudokuCls';\n\ninterface IProps {\n  controllBar: Controll[];\n  choosedGrid: Grid | null;\n  barClick: (col: Controll) => void;\n}\n\nconst ControllBar: React.SFC<IProps> = ({ controllBar, barClick, choosedGrid }) => {\n  const clearCls = classnames({\n    'controll-item': true,\n    'clear': choosedGrid && choosedGrid.num,\n  });\n  return (\n    <div className=\"controll-bar\">\n      {\n        controllBar.map(col => {\n          const cls = classnames({\n            'controll-item': true,\n            'active': col.status,\n            'forbidden': !col.status,\n          })\n          return (\n            <span \n              key={col.num as number} \n              className={cls}\n              onClick={() => barClick(col)}\n            >{ col.num }</span>\n          )\n        })\n      }\n      <span \n        className={clearCls}\n        onClick={() => barClick({ status: true, num: null })}\n      >del</span>\n    </div>\n  );\n};\n\nexport default ControllBar;\n","import * as React from 'react';\nimport { Controll } from '../../utils';\nimport { rownames, colnames } from '../../utils/constants';\nimport { Grid } from '../../utils/SudokuCls';\n\ninterface IProps {\n  choosedGrid: Grid | null;\n  controllBar: Controll[];\n}\n\nconst GridStatus: React.SFC<IProps> = ({ choosedGrid }) => {\n  const { rowIdx, colIdx, showNum } = choosedGrid as Grid;\n  return (\n    <div className=\"game-status-container\">\n      <h5>选中元素：</h5>\n      <p>位置：{ colnames[colIdx] + ' ' + rownames[rowIdx] }</p>\n      <p>填入：{ showNum }</p>\n    </div>\n  );\n};\n\nexport default GridStatus;\n","import * as React from 'react';\nimport './index.css';\nimport avatar from '../../assets/avatar.jpeg';\n\ninterface IProps {\n  start: () => void;\n}\n\nconst GameStatus: React.SFC<IProps> = ({ start }) => {\n  return (\n    <div className=\"game-status-container\">\n      <div className=\"game-user\">\n        <img className=\"avatar\" src={avatar} alt=\"avatar\" />\n        <span>changzhenan</span>\n      </div>\n      <button className=\"btn btn-primary btn-sm\" onClick={start}>开始</button> &nbsp;\n      <button className=\"btn btn-warning btn-sm\" onClick={start}>暂停</button>\n    </div>\n  );\n};\n\nexport default GameStatus;\n","import * as React from 'react';\nimport { IStep } from '../../state';\nimport { observer } from 'mobx-react';\nimport './index.css';\nimport { rownames, colnames } from '../../utils/constants';\n\ninterface IProps {\n  history: IStep[];\n  stepClick: (step: IStep) => void;\n}\n\nconst History: React.SFC<IProps> = observer(({ history, stepClick }) => {\n  return (\n    <div className=\"game-status-container history-container\">\n      {\n        history.map(step => (\n          <div key={step.step} className=\"history-step\" onClick={() => stepClick(step)}>\n            {\n              step.step === 0 ? \n              `开局` :\n              `第${step.step}步  ${colnames[step.colIdx]} ${rownames[step.rowIdx]}`\n            }\n          </div>\n        ))\n      }\n    </div>\n  );\n});\n\nexport default History;\n","import { controllKeys, baseNums } from './constants';\n\nexport class Controll {\n\tpublic num: number | null;\n\tpublic status: boolean = false;\n\n\tconstructor(num: number) {\n\t\tthis.num = num;\n\t}\n}\n\nclass Utils {\n  public static generateControllBar(): Controll[] {\n    return controllKeys.map(key => new Controll(key))\n  }\n\n  public static getPalaceKey(rowKey: number, colKey: number): number {\n    const palaceKey = Math.floor(rowKey / 3) * 3 + Math.floor(colKey / 3) + 1;\n    return palaceKey;\n  }\n\n  public static random(start: number, end: number) {\n\t\treturn Math.floor(Math.random() * (end + 1 - start) + start);\n\t}\n\n\tpublic static randomOne2Nine() {\n\t\tconst nums = [...baseNums];\n\t\tUtils.randomArray(nums);\n\t\treturn nums;\n\t}\n\n\tpublic static randomArray(array: any[]) {\n\t\tconst len = array.length - 1;\n\t\tArray(10)\n\t\t\t.fill(0)\n\t\t\t.forEach(() => {\n\t\t\t\tconst start = Utils.random(0, len);\n\t\t\t\tconst end = Utils.random(0, len);\n\t\t\t\t[array[start], array[end]] = [array[end], array[start]];\n\t\t\t});\n  }\n  \n  public static isCorrectData(array: Array<Array<number | null>>): boolean {\n    const SUM = 45;\n    let isCorrect = true;\n    const sums: any = {};\n\n    function collect(num: number | null, rowIdx: number, colIdx: number) {\n      const rowKey = `row${rowIdx}`;\n      const colKey = `col${colIdx}`;\n      const palaceKey = `palace${Utils.getPalaceKey(rowIdx, colIdx)}`;\n\n      if (sums[rowKey]) {\n        sums[rowKey] += num;\n      } else {\n        sums[rowKey] = num;\n      }\n\n      if (sums[colKey]) {\n        sums[colKey] += num;\n      } else {\n        sums[colKey] = num;\n      }\n\n      if (sums[palaceKey]) {\n        sums[palaceKey] += num;\n      } else {\n        sums[palaceKey] = num;\n      }\n    }\n\n    array.forEach((row, rowIdx) => row.forEach((grid, colIdx) => collect(grid, rowIdx, colIdx)));\n\n    Object.keys(sums).forEach(key => {\n      if (sums[key] !== SUM) {\n        isCorrect = false;\n      }\n    })\n\n    return isCorrect;\n  }\n}\n\nexport default Utils;","import Utils from './index';\nimport { baseNums } from './constants';\nimport { observable } from \"mobx\";\n\nexport class Grid {\n  public rowIdx: number;\n\tpublic colIdx: number;\n\tpublic _num: number | null = null;\n\t@observable public showNum: number | null = null;\n  public belongToPalace: number;\n  public availabelNums: number[] = [];\n\tpublic availabelIdx: number = 0; \n\t@observable public status: {\n\t\tisInit: boolean,\n\t\tisChoosed: boolean,\n\t} = {\n\t\tisInit: true,\n\t\tisChoosed: false,\n\t};\n\n\tconstructor(rowIdx: number, colIdx: number) {\n\t\tthis.rowIdx = rowIdx;\n\t\tthis.colIdx = colIdx;\n\t\tthis.belongToPalace = Utils.getPalaceKey(rowIdx, colIdx);\n\t}\n\n\tpublic get num(): number | null {\n\t\treturn this._num;\n\t}\n\n\tpublic set num(num: number | null) {\n\t\tthis.showNum = num;\n\t\tthis._num = num;\n\t}\n\n\tpublic next() {\n\t\tthis.availabelIdx += 1;\n\t\treturn this.availabelNums[this.availabelIdx];\n\t}\n}\n\nexport default class Sudoku {\n\t@observable public grids: Grid[][] = [];\n\tpublic numberOfMumbers?: number;\n\n\t/**\n\t * @param numberOfMumbers 开局留下的个数\n\t */\n\tconstructor(numberOfMumbers?: number) {\n\t\tthis.numberOfMumbers = numberOfMumbers;\n\t\tthis.reset();\n\t}\n\n\tpublic get fullArray() {\n\t\treturn this.toArray('num');\n\t}\n\n\tpublic get incompleteArray() {\n\t\treturn this.toArray('showNum');\n\t}\n\n\tpublic reset() {\n\t\tthis.grids = this.generateGrids();\n\t\tthis.fill();\n\t\tthis.digHoles();\n\t}\n\n\tpublic generateGrids() {\n\t\tconst grids = Array(9)\n\t\t\t.fill(0)\n\t\t\t.map((row, rowIdx) =>\n\t\t\t\tArray(9)\n\t\t\t\t.fill(0)\n\t\t\t\t.map((col, colIdx) => new Grid(rowIdx, colIdx))\n\t\t\t);\n\t\treturn grids;\n\t}\n\n\tpublic fill() {\n\t\tthis.fillFirstRow();\n    this.fillRows();\n\t}\n\n\tpublic fillFirstRow() {\n\t\tconst randomNums = Utils.randomOne2Nine();\n\t\tthis.grids[0].forEach(grid => {\n\t\t\tgrid.num = randomNums.pop() as number;\n\t\t});\n\t}\n\n\tpublic fillRows(startRowIdx?: number, startColIdx?: number): any {\n    startRowIdx = startRowIdx || 1;\n    startColIdx = startColIdx || 0;\n\t\tfor (let i = startRowIdx; i < 9; i++) {\n\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\tif (i === startRowIdx && j < startColIdx) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst grid = this.grids[i][j];\n\t\t\t\tconst availabelNums = this.getAvailableNums(grid, 'num');\n\t\t\t\tif (availabelNums.length) {\n\t\t\t\t\tgrid.availabelNums = availabelNums;\n\t\t\t\t\tgrid.availabelIdx = 0;\n\t\t\t\t\tgrid.num = availabelNums[grid.availabelIdx];\n\t\t\t\t} else {\n\t\t\t\t\tconst { rowIdx: a, colIdx: b } = this.toFlashBack(grid);\n\t\t\t\t\treturn this.fillRows(a, b);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 回溯\n\tpublic toFlashBack(grid: Grid): any {\n\t\tconst { colIdx } = grid;\n\n\t\tif (colIdx === 0) {\n\t\t\treturn this.toFlashBackByRow(grid);\n\t\t} else {\n\t\t\treturn this.toFlashBackByCol(grid);\n\t\t}\n\t}\n\n\t// 按列\n\tpublic toFlashBackByCol(grid: Grid): any {\n\t\tconst { rowIdx, colIdx } = grid;\n\t\tconst prevGrid = this.grids[rowIdx][colIdx - 1];\n\t\tconst isSucc = this.fillNextNum(prevGrid);\n\t\tif (!isSucc) {\n\t\t\treturn this.toFlashBack(prevGrid);\n\t\t}\n\t\treturn {\n\t\t\trowIdx,\n\t\t\tcolIdx\n\t\t};\n\t}\n\n\t// 按行\n\tpublic toFlashBackByRow(grid: Grid): any {\n\t\tconst { rowIdx } = grid;\n\t\tlet prevRowIdx = rowIdx - 1;\n\t\t// 清空上一行数据\n\t\tthis.grids[prevRowIdx].forEach(grid => (grid.num = null));\n\t\tconst prevGrid = this.grids[prevRowIdx][0];\n\t\tconst isSucc = this.fillNextNum(prevGrid);\n\t\tif (!isSucc) {\n\t\t\treturn this.toFlashBackByRow(prevGrid);\n\t\t}\n\t\treturn {\n\t\t\trowIdx: prevGrid.rowIdx,\n\t\t\tcolIdx: prevGrid.colIdx\n\t\t};\n\t}\n\n\tpublic fillNextNum(grid: Grid) {\n\t\tconst nextNum = grid.next();\n\t\tgrid.num = nextNum;\n\t\tif (!nextNum) {\n\t\t\tgrid.availabelIdx = 0;\n\t\t}\n\t\treturn !!nextNum;\n\t}\n\n\tpublic getAvailableNums({\n\t\trowIdx: targetRowIdx,\n\t\tcolIdx: targetColIdx,\n\t\tbelongToPalace: targetBelongToPalaca\n\t}: Grid, key: 'num' | 'showNum') {\n\t\tconst occupiedRowNums: number[] = [];\n\t\tconst occupiedColNums: number[] = [];\n\t\tconst occupiedPalaceNums: number[] = [];\n\t\tthis.grids.forEach(row => {\n\t\t\trow.forEach(grid => {\n\t\t\t\tconst { rowIdx, colIdx, belongToPalace } = grid;\n\t\t\t\tif (!(rowIdx === targetRowIdx && colIdx === targetColIdx)) {\n\t\t\t\t\tif (grid[key]) {\n\t\t\t\t\t\tif (rowIdx === targetRowIdx) {\n\t\t\t\t\t\t\toccupiedRowNums.push(grid[key] as number);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (colIdx === targetColIdx) {\n\t\t\t\t\t\t\toccupiedColNums.push(grid[key] as number);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (belongToPalace === targetBelongToPalaca) {\n\t\t\t\t\t\t\toccupiedPalaceNums.push(grid[key] as number);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst occupiedNums = new Set([\n\t\t\t...occupiedRowNums,\n\t\t\t...occupiedColNums,\n\t\t\t...occupiedPalaceNums\n\t\t]);\n\t\tconst allNums = new Set(baseNums);\n\t\tconst availabelNums = [\n\t\t\t...new Set([...allNums].filter(x => !occupiedNums.has(x)))\n\t\t];\n\t\tif (availabelNums.length) {\n\t\t\tUtils.randomArray(availabelNums);\n\t\t}\n\t\treturn availabelNums;\n\t}\n\n\tpublic toArray(key: 'num' | 'showNum') {\n\t\treturn this.grids.map(row => row.map(grid => grid[key]));\n\t}\n\n\tpublic digHoles() {\n\t\tconst holes = 81 - (this.numberOfMumbers || 30);\n\t\tlet digs = 0;\n\t\twhile(digs < holes) {\n\t\t\tconst i = Utils.random(0, 8);\n\t\t\tconst j = Utils.random(0, 8);\n\t\t\tif (this.grids[i][j]) {\n\t\t\t\tthis.grids[i][j].showNum = null;\n\t\t\t\tthis.grids[i][j].status.isInit = false;\n\t\t\t\tdigs++;\n\t\t\t}\n\t\t}\n\t}\n}\n","import { observable, action } from \"mobx\";\nimport Utils, { Controll } from './utils';\nimport { controllKeys } from './utils/constants';\nimport SudokuCls, { Grid } from './utils/SudokuCls';\n\nexport interface IStep {\n  step: number | string;\n  rowIdx: number; \n  colIdx: number; \n  prevShowNum: number | null;\n};\n\nexport class SudokuStore {\n  @observable public sudoku: SudokuCls = new SudokuCls(0);\n  @observable public controllBar: Controll[] = [];\n  @observable public choosedGrid: Grid | null = null;\n  @observable public isWin: boolean = false;\n  @observable public history: IStep[] = [];\n\n  constructor() {\n    this.startGame();\n  }\n\n  @action public startGame() {\n    this.sudoku = new SudokuCls(30);\n    this.controllBar = controllKeys.map(key => new Controll(key));\n    this.choosedGrid= null;\n    this.isWin = false;\n    this.history = [];\n  }\n  \n  @action public chooseGrid(grid: Grid) {\n    if (this.choosedGrid) {\n      this.choosedGrid.status.isChoosed = false;\n    }\n    grid.status.isChoosed = true;\n    this.choosedGrid = grid;\n    this.calcControllBar();\n  }\n\n  @action public calcControllBar() {\n    const activeNums: number[] = this.sudoku.getAvailableNums(this.choosedGrid as Grid, 'showNum');\n    this.controllBar = this.controllBar.map(bar => {\n      bar.status = activeNums.includes(bar.num as number);\n      return bar;\n    });\n  }\n\n  @action public fillNum(num: number | null) {\n    if (!this.choosedGrid) {\n      return;\n    }\n    const { rowIdx, colIdx } = this.choosedGrid;\n    this.addGrid2History(this.choosedGrid);\n    this.sudoku.grids[rowIdx][colIdx].showNum = num;\n    this.isOver();\n  }\n\n  @action public addGrid2History({ rowIdx, colIdx, showNum }: Grid): void {\n    if (!this.history.length) {\n      this.history = [{\n        step: 0,\n        rowIdx,\n        colIdx,\n        prevShowNum: null,\n      }];\n    }\n    const step: IStep = {\n      step: this.history.length,\n      rowIdx,\n      colIdx,\n      prevShowNum: showNum,\n    };\n    this.history.unshift(step);\n  }\n\n  @action public resetFromHistory(step: IStep) {\n    const history = [...this.history];\n\n    while(step !== history[0]) {\n      const prevStep = history.shift();\n      const { rowIdx, colIdx, prevShowNum } = prevStep as IStep;\n      this.sudoku.grids[rowIdx][colIdx].showNum = prevShowNum;\n    }\n    if (this.choosedGrid) {\n      this.choosedGrid.status.isChoosed = false;\n    }\n    if (step.step !== 0) {\n      const grid = this.sudoku.grids[step.rowIdx][step.colIdx];\n      this.chooseGrid(grid);\n    } else {\n      this.choosedGrid = null;\n      this.controllBar = controllKeys.map(key => new Controll(key));\n    }\n    this.history = history;\n  }\n\n  @action public isOver() {\n    this.isWin = Utils.isCorrectData(this.sudoku.incompleteArray);\n  }\n}\n\nexport default new SudokuStore();\n","import { App } from './App';\nimport { Controll } from './utils';\nimport { Grid } from './utils/SudokuCls';\nimport { IStep } from './state';\n\nexport function startGame(this: App) {\n  this.props.pageStore.startGame();\n}\n\nexport function gridClick(this: App, grid: Grid) {\n  if (grid.status.isInit) {\n    return;\n  }\n  const { pageStore } = this.props;\n  pageStore.chooseGrid(grid);\n}\n\nexport function barClick(this: App, controll: Controll) {\n  if (!controll.status) {\n    return;\n  }\n  this.props.pageStore.fillNum(controll.num);\n}\n\nexport function stepClick(this: App, step: IStep) {\n  this.props.pageStore.resetFromHistory(step);\n}","import React, { Component } from 'react';\nimport Checkerboard from './components/Checkerboard';\nimport ControllBar from './components/ControllBar';\nimport GridStatus from './components/GridStatus';\nimport GameStatus from './components/GameStatus';\nimport History from './components/History';\nimport { observer } from 'mobx-react';\nimport pageStore, { SudokuStore } from './state';\nimport * as events from './events';\nimport './App.css';\n\n\ninterface IProps {\n  pageStore: SudokuStore;\n}\n\n@observer\nexport class App extends Component<IProps> {\n\n  render() {\n    const { pageStore: { sudoku, controllBar, choosedGrid, isWin, history } } = this.props;\n\n    return (\n      <div className=\"App\">\n        <div className=\"left\">\n          Sudoku Game { isWin ? 'win' : 'not win' }\n          <Checkerboard \n            sudoku={sudoku} \n            gridClick={events.gridClick.bind(this)}\n          />\n          <ControllBar \n            controllBar={controllBar} \n            choosedGrid={choosedGrid}\n            barClick={events.barClick.bind(this)}\n          />\n        </div>\n        <div className=\"right\">\n          Dashboard\n          <GameStatus \n            start={events.startGame.bind(this)}\n          />\n          {history.length ? \n          <History \n            history={history} \n            stepClick={events.stepClick.bind(this)}\n          /> : null}\n          {choosedGrid && <GridStatus \n            choosedGrid={choosedGrid} \n            controllBar={controllBar} \n          />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default () => <App pageStore={pageStore} />;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}